# Builds a docker image, publishes it to GitHub's docker repo (ghcr.io),
# and subsequently deploys it as a Container App revision.
#
# The workflow will only run if commit message contains [tag:patch|minor|major]

name: Deploy Update

on:
  # push:
  #   branches: [main]
  # pull_request:
  #   branches: [main]
  workflow_call:
    inputs:
      username:
        required: true
        type: string
    # secrets:
    #   BUF_USER:
    #     required: true
    #   BUF_PAT:
    #     required: true
    #   GH_USER:
    #     required: true
    #   GH_PAT:
    #     required: true
    #   GH_ORG:
    #     required: true

env:
  IMAGE_REPO: ghcr.io/${{ github.repository }}

jobs:
  # ----------------------------------------------------
  # Build a docker image, tag, and publish
  #  - only runs if [tag:patch|minor|major] is found
  #    in commit message
  # ----------------------------------------------------
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    # only run if commit message contains versioning setting
    if: |
      contains(github.event.head_commit.message, '[tag:patch]')
      || contains(github.event.head_commit.message, '[tag:minor]')
      || contains(github.event.head_commit.message, '[tag:major]')

    steps:
      - name: Workflowout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # run unit tests
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: ">=1.18.0"

      - name: Run unit tests
        env:
          BUF_USER: ${{ secrets.BUF_USER }}
          BUF_PAT: ${{ secrets.BUF_PAT }}
          GH_USER: ${{ secrets.GH_USER }}
          GH_PAT: ${{ secrets.GH_PAT }}
          GH_ORG: ${{ github.repository_owner }}
        run: |
          echo "machine github.com login $GH_USER password $GH_PAT" >> ~/.netrc
          echo "machine go.buf.build login $BUF_USER password $BUF_PAT" >> ~/.netrc
          go env -w GOPRIVATE="github.com/$GH_ORG/*"
          go mod download
          go test -v ./handler/...

      # generate new version number â€” increment based on [tag:xxx] setting
      - name: Generate version
        id: version
        uses: paulhatch/semantic-version@v4.0.2
        with:
          major_pattern: "[tag:major]"
          minor_pattern: "[tag:minor]"
          short_tags: false

      # tag the repo using the new version
      - name: Tag repo
        uses: actions/github-script@v5
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/${{ steps.version.outputs.version_tag }}",
              sha: context.sha
            })

      # log in to docker repo (Github container registry)
      - name: Log in to GitHub container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # generate docker image tag using the new version
      - name: Generate image tag
        id: tag
        run: |
          echo "::set-output name=image-tag::${{ env.IMAGE_REPO }}:${{ steps.version.outputs.version_tag }}"

      # build and publish docker image
      - name: Build and push image
        uses: docker/build-push-action@v3
        with:
          context: .
          build-args: |
            BUF_USER=${{ secrets.BUF_USER }}
            BUF_PAT=${{ secrets.BUF_PAT }}
            GH_USER=${{ secrets.GH_USER }}
            GH_PAT=${{ secrets.GH_PAT }}
            GH_ORG=${{ github.repository_owner }}
          push: true
          tags: ${{ steps.tag.outputs.image-tag }}, ${{ env.IMAGE_REPO }}:latest

      - name: Create release
        uses: actions/github-script@v5
        with:
          script: |
            github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: "${{ steps.version.outputs.version_tag }}"
            })

    outputs:
      image-tag: ${{ steps.tag.outputs.image-tag }}
