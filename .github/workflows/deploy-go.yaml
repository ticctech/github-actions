# Deploys the specified docker image as a Container App.

# https://docs.github.com/en/enterprise-cloud@latest/actions/using-workflows/reusing-workflows

name: Deploy Container App

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      tag:
        required: true
        type: string
      api-name:
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Set env
        id: env
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            switch('${{ inputs.environment }}') {
              case 'staging':
                return "stg"
              case 'production':
                return "prd"
              default:
                return "dev"
            }

      - run: npm install semver

      - name: Get major version
        id: version
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const semver = require('semver')
            return `v${semver.major('${{ inputs.tag }}')}`

      - uses: actions/checkout@v3

      - name: Azure login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # - name: Deploy Container App
      #   uses: azure/arm-deploy@v1
      #   with:
      #     deploymentName: ${{ github.event.repository.name }}
      #     scope: resourcegroup
      #     subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      #     resourceGroupName: app-ticc-${{ steps.env.outputs.result }}-ae-rg
      #     template: ./.github/workflows/main.bicep
      #     parameters: ./.github/workflows/params.json ${{ steps.params.outputs.result }}
      #     failOnStdErr: false

      # HACK: use az cli to deploy bicep until azure/arm-deploy supports --template-spec
      - name: Deploy Container App
        run: |
          echo ca_output=$(az deployment group create \
            --name "${{ github.event.repository.name }}" \
            --resource-group "app-ticc-${{ steps.env.outputs.result }}-ae-rg" \
            --subscription "${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            --template-spec "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/app-ticc-${{ steps.env.outputs.result }}-ae-rg/providers/Microsoft.Resources/templateSpecs/ts-container-app/versions/1.0" \
            --parameters "env=${{ steps.env.outputs.result }}" \
            --parameters "appName=${{ github.event.repository.name }}" \
            --parameters "imageTag=ghcr.io/${{ github.repository }}:${{ inputs.tag }}" \
            --parameters "ghcrUser=${{ secrets.GHCR_USER }}" \
            --parameters "ghcrPat=${{ secrets.GHCR_PAT }}" \
            --query "{containerAppFqdn: properties.outputs.containerAppFqdn.value, containerAppId:properties.outputs.containerAppId.value}") >> $GITHUB_ENV

      # get API params
      - name: Set API params
        id: api-params
        uses: actions/github-script@v6
        with:
          script: |
            console.log('${{ env.ca_output }}')

            let apiSpec = require('./gen/proto/openapi/docs.swagger.json')
            if (!apiSpec) {
              return ''
            }
            let apiName = '${{ inputs.api-name }}'
            if (apiName === '') {
              apiName = '${{ github.event.repository.name }}s'
            }
            const outputs = JSON.parse('${{ env.ca_output }}')

            let p = 'apiSpec=' + Buffer.from(JSON.stringify(apiSpec)).toString('base64')
            p += ' apiName=' + apiName
            p += ' containerAppId=' + outputs.containerAppId
            p += ' containerAppFqdn=' + outputs.containerAppFqdn
            return p
          result-encoding: string

      - name: Deploy Container App API
        if: steps.api-params.outputs.result != ''
        run: |
          az deployment group create \
            --name ${{ github.event.repository.name }} \
            --resource-group "app-ticc-${{ steps.env.outputs.result }}-ae-rg" \
            --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} \
            --template-spec "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/app-ticc-${{ steps.env.outputs.result }}-ae-rg/providers/Microsoft.Resources/templateSpecs/ts-container-api/versions/1.0" \
            --parameters "env=${{ steps.env.outputs.result }}" \
            --parameters "appName=${{ github.event.repository.name }}" \
            --parameters ${{ steps.api-params.outputs.result }}
