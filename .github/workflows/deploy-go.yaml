# Deploys the specified docker image as a Container App.

# https://docs.github.com/en/enterprise-cloud@latest/actions/using-workflows/reusing-workflows

name: Deploy Container App

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      image-tag:
        required: true
        type: string
      api-spec:
        type: string
jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Set env
        id: env
        uses: actions/github-script@v6
        with:
          script: |
            switch('${{ inputs.environment }}') {
              case 'staging':
                return "stg"
              case 'production':
                return "prd"
              default:
                return "dev"
            }
          result-encoding: string

      - uses: actions/checkout@v3

      # simplify manage bicep parameter management
      - name: Set params
        id: params
        uses: actions/github-script@v6
        with:
          script: |
            let apiSpec;
            if('${{ inputs.api-spec }}') {
              apiSpec = require('${{ inputs.api-spec}}');
              apiSpec = btoa(JSON.stringify(apiSpec));
            }

            let p = 'env=${{ steps.env.outputs.result }}';
            p += ' appName=${{ github.event.repository.name }}';
            p += ' imageTag=${{ inputs.image-tag }}';
            p += ' ghcrUser=${{ secrets.GHCR_USER }}';
            p += ' ghcrPat=${{ secrets.GHCR_PAT }}';
            p += ' apiSpec=' + apiSpec;
            return p
          result-encoding: string

      - name: Azure login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # - name: Deploy Container App
      #   uses: azure/arm-deploy@v1
      #   with:
      #     deploymentName: ${{ github.event.repository.name }}
      #     scope: resourcegroup
      #     subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      #     resourceGroupName: app-ticc-${{ steps.env.outputs.result }}-ae-rg
      #     template: ./.github/workflows/main.bicep
      #     parameters: ./.github/workflows/params.json ${{ steps.params.outputs.result }}
      #     failOnStdErr: false

      # HACK: use az cli to deploy bicep until azure/arm-deploy supports --template-spec
      - name: Deploy bicep
        run: |
          az deployment group create \
            --resource-group "app-ticc-${{ steps.env.outputs.result }}-ae-rg" \
            --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} \
            --template-spec "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/app-ticc-${{ steps.env.outputs.result }}-ae-rg/providers/Microsoft.Resources/templateSpecs/ts-containerapp/versions/1.0" \
            --parameters ${{ steps.params.outputs.result }}
