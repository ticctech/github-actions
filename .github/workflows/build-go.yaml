# Builds a docker image, publishes it to GitHub's docker repo (ghcr.io).
# The workflow will only run if commit message contains [tag:patch|minor|major]

# See: https://docs.github.com/en/enterprise-cloud@latest/actions/using-workflows/reusing-workflows

name: Build Go container

on:
  workflow_call:
    outputs:
      image-tag:
        description: Tag for the docker image
        value: ${{ jobs.image.outputs.image-tag }}

jobs:
  image:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    outputs:
      image-tag: ${{ env.image_tag }}

    # run unless explicitly skipped (commit message contains [skip])
    if: |
      !contains(github.event.head_commit.message, '[skip]')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Buf
        uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Latest tag
        run: |
          echo "latest_tag=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV

      # - name: Fail when breaking proto change
      #   uses: bufbuild/buf-breaking-action@v1
      #   with:
      #     against: .git#tag=${{ env.latest_tag }}
      #     # against: .git#tag=${{ steps.latest-release.outputs.result }}
      #     # against: '.git#branch=main,ref=HEAD~1'
      #     buf_token: ${{ secrets.BUF_PAT }}

      - name: Lint protos
        uses: bufbuild/buf-lint-action@v1
        with:
          input: proto
          buf_token: ${{ secrets.BUF_PAT }}

      - name: Push to Buf Schema Registry
        uses: bufbuild/buf-push-action@v1
        with:
          input: proto
          buf_token: ${{ secrets.BUF_PAT }}

      # ---------------------------------------------------
      # Version: patch, minor, or major
      # ---------------------------------------------------

      - run: npm install semver deep-equal
        
      - name: Update version
        id: semver
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const deepEqual = require('deep-equal')
            const semver = require('semver')
            let currProto, prevProto
            await exec.exec('buf', ['build', '--exclude-imports', '--exclude-source-info', '-o', '-#format=json'], {
              listeners: {
                stdout: (data) => { currProto = data.toJSON() }
              }
            })
            await exec.exec('buf', ['build', '${{ github.repository }}.git#tag=${{ env.latest_tag }}', '--exclude-imports', '--exclude-source-info', '-o', '-#format=json'], {
              listeners: {
                stdout: (data) => { prevProto = data.toJSON() }
              }
            })

            // major, premajor, minor, preminor, patch, prepatch, or prerelease
            // semver.inc('1.2.3', 'prerelease', 'beta')

            let increment = ''
            if (semver.prerelease('${{ env.latest_tag }}')){
              increment = 'prerelease'
            } else if (deepEqual(currProto, prevProto)) {
              increment = 'patch'
            } else {
              increment = 'minor'
            }
            return semver.inc('${{ env.latest_tag }}', increment)

      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: ">=1.18.0"

      - name: Run unit tests
        env:
          # use env vars to write unmasked secrets to .netrc file
          BUF_USER: ${{ secrets.BUF_USER }}
          BUF_PAT: ${{ secrets.BUF_PAT }}
          GH_USER: ${{ secrets.GH_USER }}
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          echo "machine github.com login $GH_USER password $GH_PAT" >> ~/.netrc
          echo "machine go.buf.build login $BUF_USER password $BUF_PAT" >> ~/.netrc
          go env -w GOPRIVATE="github.com/${{ github.repository_owner }}/*"
          go mod download
          go test -v ./...

      - name: Log in to GitHub container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate image tag
        id: tag
        run: |
          echo "image_tag=ghcr.io/${{ github.repository }}:${{ steps.semver.outputs.result }}" >> $GITHUB_ENV

      - name: Build and push image
        uses: docker/build-push-action@v3
        with:
          context: .
          build-args: |
            BUF_USER=${{ secrets.BUF_USER }}
            BUF_PAT=${{ secrets.BUF_PAT }}
            GH_USER=${{ secrets.GH_USER }}
            GH_PAT=${{ secrets.GH_PAT }}
            GH_ORG=${{ github.repository_owner }}
          push: true
          tags: ${{ env.image_tag }}, ghcr.io/${{ github.repository }}:latest
      
      # Create release (and release's tag)
      - name: Create release
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: "${{ steps.semver.outputs.result }}"
            })
