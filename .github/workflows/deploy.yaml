# Deploys the specified docker image as a Container App.

# https://docs.github.com/en/enterprise-cloud@latest/actions/using-workflows/reusing-workflows

name: Deploy Container App

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      image-tag:
        required: true
        type: string
    secrets: inherit

env:
  IMAGE_REPO: ghcr.io/${{ github.repository }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read

    steps:
      # generate environment short name to match app 'namespace' used in Azure
      - name: Environment short name
        id: env
        run: |
          echo "::set-output name=val::stg"

      - uses: actions/checkout@v3

      - name: Azure login
        uses: azure/login@v1
        with:
          # creds: ${{ secrets.AZURE_CREDENTIALS }}
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy Container App
        uses: azure/arm-deploy@v1
        with:
          deploymentName: ${{ github.event.repository.name }}
          scope: resourcegroup
          # subscriptionId: ${{ env.SUBSCRIPTION }}
          # resourceGroupName: ${{ env.RESOURCE_GROUP }}
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          resourceGroupName: app-ticc-${{ steps.env.outputs.val }}-ae-rg
          template: .github/bicep/main.bicep
          parameters: .github/bicep/params.json appName=${{ github.event.repository.name }} managedEnvName=cae-ticc-${{ steps.env.outputs.val }} apiManagerName=apim-ticc-${{ steps.env.outputs.val }} imageName=${{ inputs.image-tag }} mongoUri=${{ secrets.MONGO_URI }} ghcrUser=${{ secrets.GHCR_USER }} ghcrPat=${{ secrets.GHCR_PAT }}
          failOnStdErr: false
