# Deploys the specified docker image as a Container App.

# https://docs.github.com/en/enterprise-cloud@latest/actions/using-workflows/reusing-workflows

name: Deploy Container App

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      image-tag:
        required: true
        type: string
      # api-spec:
      #   required: true
      #   type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read

    steps:
      # - uses: actions/checkout@v3
      # - run: |
      #     cd ${GITHUB_WORKSPACE}
      #     ls

      - uses: actions/github-script@v6
        with:
          script: |
            console.log('Print 1: ','${{ env.GITHUB_WORKSPACE }}'')
            console.log('Print 3: ','${GITHUB_WORKSPACE}'')

      # # generate environment short name to match app 'namespace' used in Azure
      # - name: Set env
      #   id: env
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       switch('${{ inputs.environment }}') {
      #         case 'staging':
      #           return "stg"
      #         case 'production':
      #           return "prd"
      #         default:
      #           return "dev"
      #       }
      #     result-encoding: string

      # - name: Load local variables
      #   id: api-spec
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       return await import('${{ env.GITHUB_WORKSPACE }}/gen/proto/openapi/${{ github.event.repository.name }}/v1/${{ github.event.repository.name }}.swagger.json')
      #     result-encoding: string

      # # make it easier to manage parameters
      # - name: Set params
      #   id: params
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       let p = 'env=${{ steps.env.outputs.result }}'
      #       p += ' appName=${{ github.event.repository.name }}'
      #       p += ' imageName=${{ inputs.image-tag }}'
      #       p += ' ghcrUser=${{ secrets.GHCR_USER }}'
      #       p += ' ghcrPat=${{ secrets.GHCR_PAT }}'
      #       p += ' mongoUri=${{ secrets.MONGO_URI }}'
      #       p += ' apiSpec=${{ steps.tag.outputs.image-tag }}'
      #       return p
      #     result-encoding: string

      # - uses: actions/checkout@v3

      # - name: Azure login
      #   uses: azure/login@v1
      #   with:
      #     client-id: ${{ secrets.AZURE_CLIENT_ID }}
      #     tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      #     subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # - name: Deploy Container App
      #   uses: azure/arm-deploy@v1
      #   with:
      #     deploymentName: ${{ github.event.repository.name }}
      #     scope: resourcegroup
      #     subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      #     resourceGroupName: app-ticc-${{ steps.env.outputs.result }}-ae-rg
      #     template: .github/bicep/main.bicep
      #     parameters: ${{ steps.params.outputs.result }}
      #     failOnStdErr: false
